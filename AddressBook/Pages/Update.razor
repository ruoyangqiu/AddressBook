@page "/update/{id}"
@using AddressBook.Data
@using AddressBook.Services
@inject AddressService objAddressService
@inject NavigationManager NavigationManager

<h3>Update</h3>
<hr />
@*Dynamic Form*@
<form>
    <div class="row">
        <div class="col-md-8">
            @if (address != null) {
                @if (selectedCountryFormat == null)
                {
                    <em>Loading...</em>
                }
                else
                {
                    <div class="form-group">
                    <label for="Country" class="control-label">Country</label>
                        <select class="form-control" @onchange="@UpdateFormFormat">
                            <option value=""></option>
                            @if (countryFormatList != null)
                            {
                                foreach (var countryFormat in countryFormatList)
                                {
                                    <option value="@countryFormat.Id">@countryFormat.Name</option>
                                }

                            }
                        </select>
                    </div>
                }
                @if (otherCountry == true)
                {
                    <div class="form-group">
                        <label for="Country" class="control-label">Country</label>
                        <input for="Country" class="form-control" @bind="@address.Country" />
                    </div>
                }

                <div class="form-group">
                    <label for="AddressLine1" class="control-label">Address Line 1</label>
                    <input for="AddressLine1" class="form-control" @bind="@address.AddressLine1" />
                    <label class="font-italic text-black-50">Street address, P.O. box, company name, c/o</label>
                </div>

                <div class="form-group">
                    <label for="AddressLine2" class="control-label">Address Line 2</label>
                    <input for="AddressLine2" class="form-control" @bind="@address.AddressLine2" />
                    <label class="font-italic text-black-50">Apartment, suite, unit, building, floor, etc.</label>
                </div>

                @if (selectedCountryFormat.HasAddressLine3)
                {
                    <div class="form-group">
                        <label for="AddressLine3" class="control-label">Address Line 3</label>
                        <input for="AddressLine3" class="form-control" @bind="@address.AddressLine3" />
                    </div>
                }


                @if (selectedCountryFormat.AdminAreas == null)
                {
                    <div class="form-group">
                        <label for="AdminArea" class="control-label">@selectedCountryFormat.AdminAreaDisplayName</label>
                        <input for="AdminArea" class="form-control" @bind="@address.AdminArea" />
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label for="AdminArea" class="control-label">@selectedCountryFormat.AdminAreaDisplayName</label>
                        <select class="form-control" @bind="@address.AdminArea">
                            <option value=""></option>
                            @foreach (var adminArea in selectedCountryFormat.AdminAreas)
                            {
                                <option value="@adminArea">@adminArea</option>
                            }
                        </select>
                    </div>
                }

                @if (selectedCountryFormat.HasLocality)
                {
                    <div class="form-group">
                        <label for="Locality" class="control-label">@selectedCountryFormat.LocalityDisplayName</label>
                        <input for="Locality" class="form-control" @bind="@address.Locality" />
                    </div>
                }

                @if (selectedCountryFormat.HasSublocality)
                {
                    <div class="form-group">
                        <label for="Sublocality" class="control-label">@selectedCountryFormat.SublocalityDisplayName</label>
                        <input for="Sublocality" class="form-control" @bind="@address.Sublocality" />
                    </div>
                }

                <div class="form-group">
                    <label for="PostalCode" class="control-label">Postal Code</label>
                    <input for="PostalCode" class="form-control" @bind="@address.PostalCode" />
                    @if (submitted && !postCodeValidation)
                    {
                        <p style="color:red">your post code is invalid</p>
                    }
                </div>

                @if (selectedCountryFormat.HasExtraData)
                {
                    <div class="form-group">
                        <label for="ExtraData" class="control-label">Extra Data</label>
                        <input for="ExtraData" class="form-control" @bind="@address.ExtraData" />
                    </div>
                }
            }

        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input style="margin-right:50px" type="button" class="btn btn-primary" @onclick="@UpdateAddress" value="Update" />
                <input type="button" class="btn btn-primary" @onclick="@CancelUpdation" value="Cancel" />
            </div>
        </div>
    </div>

</form>

@code {

    Address address;

    [Parameter]
    public string id { get; set; }
    List<CountryFormat> countryFormatList;
    CountryFormat selectedCountryFormat;
    bool otherCountry = false;
    bool postCodeValidation = true;
    bool submitted = false;

    protected override async Task OnInitializedAsync()
    {
        countryFormatList = await Task.Run(() => objAddressService.GetAllCountryFormats());
        selectedCountryFormat = new CountryFormat();
        address = await Task.Run(() => objAddressService.ReadAddress(id));
    }

    protected void UpdateAddress()
    {
        submitted = true;
        if (objAddressService.PostalCodeValidator(address))
        {
            objAddressService.UpdateAddress(address);
            NavigationManager.NavigateTo("/index");
        }

        postCodeValidation = false;  
    }

    void CancelUpdation()
    {
        NavigationManager.NavigateTo("/index");
    }

    void UpdateFormFormat(ChangeEventArgs e)
    {
        var countryFormatId = e.Value.ToString();
        if (countryFormatId == "")
        {
            return;
        }
        selectedCountryFormat = objAddressService.ReadCountryFormat(countryFormatId);

        if (selectedCountryFormat.Name == "Other")
        {
            otherCountry = true;
        } else
        {
            otherCountry = false;
            address.Country = selectedCountryFormat.Name;
        }
    }

}
